## Priorities

1. Lofting library
2. Visualization
3. UI

## Lofting Library

Build as a standalone library, with an API + data model that can be used by any frontend.

Stateful + serializable state, for synchronization.

### Thoughts

- Editing should be as non-destructive as possible. This requires thinking through the
  stored state/sketch mapping data structure.
- Stretch: provide tools to selectively modify the lofting algorithm's output.
- API options: some operations will require recomputing the loft, some will not.
  - Expose everthing via a flat, top-level API, so that we can handle recomputing. Larger top-level API,
    but easy to handle.
  - Expose sub-objects (like `Sketch`) and put some vars in a `Cell`, so that they can be modified via
    `&self` functions. Only recompute on `&mut self` functions. Cleaner, smaller API, but also more complex
    and potentially unintuitive.

### Algorithm

1. Insert additional vertices into each sketch based on angular error.
2. Construct a mapping from vertices in each sketch.

## Dependencies

- *glam:* linear algebra.

## Progress Log

Start with loft lib API sketch.
Think about the data model/how to persist state across edits.
